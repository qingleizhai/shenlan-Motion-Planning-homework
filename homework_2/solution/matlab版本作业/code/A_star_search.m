function path = A_star_search(map,MAX_X,MAX_Y)
%%
%This part is about map/obstacle/and other settings
    %pre-process the grid map, add offset
    size_map = size(map,1);
    Y_offset = 0;
    X_offset = 0;
    
    %Define the 2D grid map array.
    %Obstacle=-1, Target = 0, Start=1
    MAP=2*(ones(MAX_X,MAX_Y));
    
    %Initialize MAP with location of the target
    xval=floor(map(size_map, 1)) + X_offset;
    yval=floor(map(size_map, 2)) + Y_offset;
    xTarget=xval;
    yTarget=yval;
    MAP(xval,yval)=0;
    
    %Initialize MAP with location of the obstacle
    for i = 2: size_map-1
        xval=floor(map(i, 1)) + X_offset;
        yval=floor(map(i, 2)) + Y_offset;
        MAP(xval,yval)=-1;
    end 
    
    %Initialize MAP with location of the start point
    xval=floor(map(1, 1)) + X_offset;
    yval=floor(map(1, 2)) + Y_offset;
    xStart=xval;
    yStart=yval;
    MAP(xval,yval)=1;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %LISTS USED FOR ALGORITHM
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %OPEN LIST STRUCTURE
    %--------------------------------------------------------------------------
    %IS ON LIST 1/0 |X val |Y val |Parent X val |Parent Y val |h(n) |g(n)|f(n)|
    %--------------------------------------------------------------------------
    OPEN=[];
    %CLOSED LIST STRUCTURE
    %--------------
    %X val | Y val |
    %--------------
    % CLOSED=zeros(MAX_VAL,2);
    CLOSED=[];

    %Put all obstacles on the Closed list
    k=1;%Dummy counter
    for i=1:MAX_X
        for j=1:MAX_Y
            if(MAP(i,j) == -1)
                CLOSED(k,1)=i;
                CLOSED(k,2)=j;
                k=k+1;
            end
        end
    end
    CLOSED_COUNT=size(CLOSED,1);
    %set the starting node as the first node
    xNode=xval;
    yNode=yval;
    OPEN_COUNT=1;
    goal_distance=distance(xNode,yNode,xTarget,yTarget);
    path_cost=0;
    OPEN(OPEN_COUNT,:)=insert_open(xNode,yNode,xNode,yNode,goal_distance,path_cost,goal_distance);
    OPEN(OPEN_COUNT,1)=0;
    CLOSED_COUNT=CLOSED_COUNT+1;
    CLOSED(CLOSED_COUNT,1)=xNode;
    CLOSED(CLOSED_COUNT,2)=yNode;
    NoPath=1;

%%
%This part is your homework
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% START ALGORITHM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   while((xNode ~= xTarget || yNode ~= yTarget) && NoPath == 1) %you have to dicide the Conditions for while loop exit 
        
     %
     %finish the while loop
     %
        exp_array=expand_array(xNode,yNode,path_cost,xTarget,yTarget,CLOSED,MAX_X,MAX_Y);
        exp_count=size(exp_array,1);
        
        for i=1:exp_count
            flag=0;
            for j=1:OPEN_COUNT
                if(exp_array(i,1) == OPEN(j,2) && exp_array(i,2) == OPEN(j,3) )
                    OPEN(j,8)=min(OPEN(j,8),exp_array(i,5)); %#ok<*SAGROW>
                    if OPEN(j,8)== exp_array(i,5)
                        %UPDATE PARENTS,gn,hn
                        OPEN(j,4)=xNode;
                        OPEN(j,5)=yNode;
                        OPEN(j,6)=exp_array(i,3);
                        OPEN(j,7)=exp_array(i,4);
                    end
                    flag=1;
                end
            end
            if flag == 0
                OPEN_COUNT = OPEN_COUNT+1;
                OPEN(OPEN_COUNT,:)=insert_open(exp_array(i,1),exp_array(i,2),xNode,yNode,exp_array(i,3),exp_array(i,4),exp_array(i,5));
            end
        end
        index_min_node = min_fn(OPEN,OPEN_COUNT,xTarget,yTarget);
        if (index_min_node ~= -1)    
           xNode=OPEN(index_min_node,2);
           yNode=OPEN(index_min_node,3);
           path_cost=OPEN(index_min_node,6);
           CLOSED_COUNT=CLOSED_COUNT+1;
           CLOSED(CLOSED_COUNT,1)=xNode;
           CLOSED(CLOSED_COUNT,2)=yNode;
           OPEN(index_min_node,1)=0;
        else
          NoPath=0;
        end
    end %End of While Loop
    
    %Once algorithm has run The optimal path is generated by starting of at the
    %last node(if it is the target node) and then identifying its parent node
    %until it reaches the start node.This is the optimal path
    
    %
    %How to get the optimal path after A_star search?
    %please finish it
    %
    
   i=size(CLOSED,1);
   path = [];
   xval=CLOSED(i,1);
   yval=CLOSED(i,2);
   i=1;
   path(i,1)=xval;
   path(i,2)=yval;
   i=i+1;

   if ((xval == xTarget) && (yval == yTarget))
      inode = 0;
   %Traverse OPEN and determine the parent nodes
      parent_x=OPEN(node_index(OPEN,xval,yval),4);%node_index returns the index of the node
      parent_y=OPEN(node_index(OPEN,xval,yval),5);
   
      while( parent_x ~= xStart || parent_y ~= yStart)
           path(i,1) = parent_x;
           path(i,2) = parent_y;
           inode=node_index(OPEN,parent_x,parent_y);
           parent_x=OPEN(inode,4);%node_index returns the index of the node
           parent_y=OPEN(inode,5);
           i=i+1;
      end
      path(i,1) = parent_x;
      path(i,2) = parent_y;
   end
end
